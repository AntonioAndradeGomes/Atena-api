generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{

  id                          String @id @default(uuid())
  name                        String
  mail                        String @unique
  isStudent                   Boolean
  isProfessor                 Boolean
  isAcademicCenter            Boolean
  registration                String
  password                    String 
  code                        String?
  caInitDate                  DateTime?
  caEndDate                   DateTime?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  academicCenterId            String?

  academicCenter              User? @relation("AcademicCenterUser", fields: [academicCenterId], references: [id])
  userAcademicCenter          User? @relation("AcademicCenterUser")

  events                      Event[]

  classesProfessorLecion      Class[] @relation(name: "classesProfessorLecion")
  classesCACreated            Class[] @relation(name: "classesCACreated")

  disciplinesCACreated        Discipline[]

  classesStudents             StudentOnClasses[]

  userToken                   UserToken?

  @@map("users")
}

model Event{
  id                          String @id @default(uuid())
  title                       String
  description                 String?
  isActive                    Boolean
  difficultyLevel             Int
  initDate                    DateTime
  endDate                     DateTime?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt()

  professor                   User @relation(fields: [professorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professorId                 String

  class                       Class @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classId                     String
  
  @@map("events")
}

model Discipline{
  id                          String    @id @default(uuid())
  code                        String    @unique
  name                        String
  initials                    String
  courseLoad                  Int
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  academicCenter              User? @relation(fields: [academicCenterId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  academicCenterId            String?

  classes                     Class[] @relation(name: "classNeedsToHaveADiscipline")

  @@map("discipline")
}

model Class{
  id                          String @id @default(uuid())
  name                        String
  academicYear                String
  period                      String
  isRegularClass              Boolean
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  professor                   User @relation(name: "classesProfessorLecion", fields: [professorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professorId                 String

  academicCenter              User? @relation(name: "classesCACreated", fields: [academicCenterId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  academicCenterId            String?

  discipline                  Discipline @relation(name: "classNeedsToHaveADiscipline", fields: [disciplineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  disciplineId                String

  events                      Event[]

  students                    StudentOnClasses[]

  @@map("class")
}

model AccessCode{
  id                          String @id @default(uuid())
  code                        String @unique
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  expiredAt                   DateTime
}

model StudentOnClasses{
  studentId                   String
  classId                     String
  student                     User @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  class                       Class @relation(fields: [classId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  @@id([studentId, classId])
}

model UserToken{
  id                          String @id @default(uuid())
  token                       String
  user                        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String
  createdAt                   DateTime @default(now())
  updateAt                    DateTime @updatedAt

  @@map("user_token")
}
<<<<<<< HEAD
=======

model Admin{
  id                          String @id @default(uuid())
  username                    String @unique
  mail                        String @unique
  password                    String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("admins")
}


model Request{
  id                          String @id @default(uuid())
  description                 String
  mail                        String
  isCheck                     Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("requests")
}
>>>>>>> crud requests
